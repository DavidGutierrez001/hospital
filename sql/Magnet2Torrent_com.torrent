<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Magnet >> Torrent</title>
  <meta name="description" content="Magnet to .torrent online converter">
  <meta name="author" content="Calpe Consulting">
  <link rel="stylesheet" href="css/reset.css">
  <link rel="stylesheet" href="css/styles.css?481790478">
  <link href='https://fonts.googleapis.com/css?family=Squada+One' rel='stylesheet' type='text/css'>
  <!--[if lt IE 9]>
  <script src="https://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]-->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
  <script src="js/spin.min.js"></script>
  <script src="js/jquery.spin.js"></script>
</head>
<body>
<script>
let statusInterval;

const maxDelay = 300000; // 300 seconds max in ms
const baseDelay = 5000; // 5 seconds base delay in ms
let attempt = 1;
let nextUpdateIn = baseDelay;
let lastPollTime = Date.now();
let countdown = Math.ceil(nextUpdateIn / 1000);



$(document).ready(function() {
	$('#input_box').focusin(function(){
		$(this).val('');
        });
$('#input_box').on('input', function() {
	
	const startTime = Date.now();

        var formData = new FormData();
	formData.append('magnet', $('#input_box').val());        
        // Start spinner and fade effect
        $('#wrap').fadeTo('slow', 0.1);
        $('body').spin({
            // spinner options
		 lines: 5, // The number of lines to draw
                 length: 30, // The length of each line
                        width: 20, // The line thickness
                        radius: 40, // The radius of the inner circle
                        rotate: 0, // The rotation offset
                        color: '#C74907', // #rgb or #rrggbb
                        speed: 0.5, // Rounds per second
                        trail: 100, // Afterglow percentage
                        top: 250,
                        left: 'auto',
	});
	$(this).blur();
        $(this).val('Paste Magnet link here');
	


function formatElapsed(ms) {
  const totalSec = Math.floor(ms / 1000);
  if (totalSec < 60) return totalSec + 's';
  if (totalSec < 3600) return Math.floor(totalSec / 60) + 'm ' + (totalSec % 60) + 's';
  const hrs = Math.floor(totalSec / 3600);
  const min = Math.floor((totalSec % 3600) / 60);
  const sec = totalSec % 60;
  return `${hrs}h ${min}m ${sec}s`;
}

$('#status-msg').text("Submitting your magnet…").css('font-size', '2.5em');
$('#elapsed-time').text("Elapsed: 0s").css('font-size', '1.5em');


statusInterval = setInterval(() => {
  const elapsed = Date.now() - startTime;
  let message = "Processing your magnet…";

  // Friendly status messages based on elapsed time
  if (elapsed >= 15000 && elapsed < 35000) {
    message = "Still working on it…";
  } else if (elapsed >= 35000 && elapsed < 75000) {
    message = "This is taking a bit longer than usual…";
  } else if (elapsed >= 75000 && elapsed < 155000) {
    message = "Hang tight, still processing…";
  } else if (elapsed >= 155000) {
    message = "Just leave this window open and go do something else.";
  }

  // Show countdown to next poll/update
  message += ` Update in ${countdown}s`;

  $('#status-msg').text(message);
  $('#elapsed-time').text("Elapsed: " + formatElapsed(elapsed));

const now = Date.now();
const timeSinceLastPoll = now - lastPollTime;
countdown = Math.ceil((nextUpdateIn - timeSinceLastPoll) / 1000);
//countdown = Math.max(0, Math.floor((nextUpdateIn - timeSinceLastPoll) / 1000));


if (timeSinceLastPoll >= nextUpdateIn) {
  attempt++;
  nextUpdateIn = Math.min(baseDelay * (2 ** (attempt - 1)), maxDelay);
  lastPollTime = now;
  }
}, 1000);






        // Use fetch to submit form data
        fetch('/upload/index.php', {
            method: 'POST',
            body: formData,
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
	    //return response.json(); // or .text() if the response is not JSON
		// Check the response content type
                const contentType = response.headers.get("content-type");
                if (contentType && contentType.includes("application/json")) {
			return response.json().then(data => {
                                // Now, data is the parsed JSON object
                                //console.log(data.gid); // Access the gid key from the JSON object
                                setTimeout(() => checkDownloadStatus(data.gid), 5000);
                        })
                } else {
                        // Assume it's a blob if not JSON

			return response.blob().then(data => {
                                //console.log('Status1:', data);
                                // Access the Content-Disposition header
                                const contentDisposition = response.headers.get('Content-Disposition');
                                let filename = 'Magnet2Torrent_com.torrent'; // A default filename if not found                 
                                if (contentDisposition) {
                                        // Extract the filename from Content-Disposition header
                                        const filenameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                                        if (filenameMatch != null && filenameMatch[1]) { 
                                                filename = filenameMatch[1].replace(/['"]/g, ''); // Remove any surrounding quotes
                                        }
                                }
				clearInterval(statusInterval);
                		$('#status-msg').text("");
                		$('#elapsed-time').text("");
                                $('#wrap').fadeTo('slow', 1); 
                                $('body').spin(false);
                                downloadBlob(data, filename);
        		})
		}
	})
        .catch(error => {
           	clearInterval(statusInterval);
		$('#status-msg').text("An error occurred while processing.");
		$('#elapsed-time').text("");
		$('body').spin(false);
		$('#wrap').fadeTo('slow', 1);

		console.error('There has been a problem with your fetch operation:', error);
            // Handle failure
            // Optionally stop spinner here
        });

        // Consider stopping the spinner and fading back in here if the fetch is very quick
        // or if you want to manually control it based on fetch response or another event
    });

    // Your existing code for handling input and other events
});
</script>
<div id="status-container" style="position: fixed; top: 40%; left: 50%; transform: translate(-50%, -100%); text-align: center; z-index: 9999;">
  <div id="status-msg" style="font-size: 16px; margin-bottom: 5px;"></div>
  <div id="elapsed-time" style="font-size: 13px; color: gray;"></div>
</div>
<div id="wrap">
	<div id="content">	
		<a href="/">
			<img src="/img/logo.png" alt="Magnet >> Torrent logo" style="margin-bottom: 100px;" />
		</a>
				<form id="magnet" action="/upload/index.php" method="post">
			<input style="background-color: #C74907; border: 5px solid #C74907; border-radius: 5px; color: #FFF; font-size: 50px; height: 50px; padding: 4px 18px; width: 850px; text-transform: uppercase; text-align: center;"  id="input_box" type="text" value="Paste Magnet link here" name="magnet" />
		</form>
		<p>
		Automagically convert your <span style="color: #C74907;">Magnet</span> links to <span style="color: #7BD380;">.torrent</span> files		
		</p>		
	</div>
	<div id="reverse">
                <a href="http://torrent2magnet.com">
                        <img src="/img/reverse.png" alt="Torrent >> Magnet" />
                </a>
        </div>
	<div id="footer">
		<p>Another <a href="http://CalpeConsulting.com">Calpe Consulting</a> Concept</p>
	</div>
</div>
<script>
function checkDownloadStatus(gid) {
//console.log("checkDownloadStatus called with gid:", gid, new Date().toISOString());	
	if(!gid) {
		return;
	}
    //if (!shouldCheckStatus) {
    //    return;
    //}
    const postData = new FormData();
    postData.append('gid', gid);
    
	fetch('upload/status.php', {
        method: 'POST',
	body: postData,
    })
	.then(response => {
        	// Check the response content type
        	const contentType = response.headers.get("content-type");
        	if (contentType && contentType.includes("application/json")) {
			return response.json().then(data => {
        			// Now, data is the parsed JSON object
        			//console.log(data.status); // Access the status key from the JSON object
				if (data.status !== "active") {
				        // Stop spinner
       					 $('body').spin(false);
        				// Fade #wrap back to normal
        				$('#wrap').fadeTo('slow', 1);
        				// Clear or hide status message and timer
					clearInterval(statusInterval);
        				$('#status-msg').text('Not working, please try again or submit another magnet. Get in touch if it continues');       // or $('#status-msg').hide();
        				$('#elapsed-time').text('');     // or $('#elapsed-time').hide();
        				return;  // stop polling
    				}

				//setTimeout(() => checkDownloadStatus(gid), 5000);
				setTimeout(() => checkDownloadStatus(gid), nextUpdateIn);
    			})
        	} else {
            		// Assume it's a blob if not JSON
            		return response.blob().then(data => {
				//console.log('Status1:', data);
	    			gid = '';
				// Access the Content-Disposition header
				const contentDisposition = response.headers.get('Content-Disposition');
				let filename = 'Magnet2Torrent_com.torrent'; // A default filename if not found			
				if (contentDisposition) {
        				// Extract the filename from Content-Disposition header
        				const filenameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
        				if (filenameMatch != null && filenameMatch[1]) { 
            					filename = filenameMatch[1].replace(/['"]/g, ''); // Remove any surrounding quotes
        				}
				}
				clearInterval(statusInterval);
                		$('#status-msg').text("");
                		$('#elapsed-time').text("");
				$('#wrap').fadeTo('slow', 1); 
				$('body').spin(false);
            			downloadBlob(data, filename);
    			})
		}
	})
	.catch(error => console.error('Fetching error:', error));
}

function downloadBlob(blob, filename) {
    // Create a URL for the blob
    const url = window.URL.createObjectURL(blob);
    // Create an anchor (<a>) element
    const a = document.createElement('a');
    // Set the download attribute to the filename
    a.download = filename;
    // Set the href to the blob URL
    a.href = url;
    // Append the anchor to the body
    document.body.appendChild(a);
    // Trigger the download
    a.click();
    // Remove the anchor from the body
    document.body.removeChild(a);
    // Release the blob URL
    window.URL.revokeObjectURL(url);
}


//let shouldCheckStatus = false;
//var gid = '';
//checkDownloadStatus(gid);

</script>
</body>
</html>
